#!/usr/bin/env bash

# bumps the version in package.json and all compile.json files
# an deletes all prerelease tags from git if they exist, so that only the latest
# prerelease is tagged.

set -o errexit
[ -z "$FUNCTIONS_LOADED" ] && source tool/lib/functions.sh

# Checks
LEVELS="major, minor, patch, premajor, preminor, prepatch, prerelease"
[[ -z "$1" ]] && exit_with_error "You must provide a level (any of $LEVELS)"
[[ "$LEVELS" == *"$1"* ]] || exit_with_error "Unknown level (must be any of $LEVELS)"

CURRENT_VERSION="$(jq '.version' package.json | sed 's/\"//g' )"
echo ">>> Current version is: $CURRENT_VERSION"

BUMPED_VERSION="$(semver -i $1 $CURRENT_VERSION)"
echo ">>> Bumped version is: $BUMPED_VERSION"

read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]; then
  npm version $BUMPED_VERSION
fi

#for file in compile-*.json ; do
#  jq '.environment["app.version"] = "'$BUMPED_VERSION'"' $file
#done

if [[ "$1" == "prerelease " ]]; then
  # delete local and remote prerelease tags
  git tag -l | grep -E 'alpha|beta' | xargs git tag -d
  git fetch && git tag -l | grep -E 'alpha|beta' | xargs -n 1 git push --delete origin
  git tag -l | grep -E 'alpha|beta' | xargs git tag -d
fi

npm version $BUMPED_VERSION
