#!/usr/bin/env bash

# This script builds the application and deploys the application to a remote
# server based on environment variables or command line values

set -e
shopt -s dotglob
[ -z "$FUNCTIONS_LOADED" ] && source tool/lib/functions.sh

# Preset or set by loaded env file:
BUILD_ENV_FILE=${BUILD_ENV_FILE:-""}
BUILD_SKIP=${BUILD_SKIP:-""}
BUILD_CONFIG_FILE=${BUILD_CONFIG_FILE:-"compile.json"}
BUILD_TARGET=${BUILD_TARGET:-"build"}
BUILD_NAME=${BUILD_NAME:-""}
BUILD_CLEAN=${BUILD_CLEAN:-0}
BUILD_VERBOSE=${BUILD_VERBOSE:-0}
DEPLOY_ENV_FILE=${DEPLOY_ENV_FILE:-""}
DEPLOY_HOST=${DEPLOY_HOST:-""}
DEPLOY_DIR=${DEPLOY_DIR:-""}
DEPLOY_CONFIG_DIR=${DEPLOY_CONFIG_DIR:-config}
DEPLOY_DB_NAME=${DEPLOY_DB_NAME:-""}
DEPLOY_IMPORT_DB_NAMES=${DEPLOY_IMPORT_DB_NAMES:-""}
DEPLOY_EMPTY_DATABASE=${DEPLOY_EMPTY_DATABASE:-0}
DEPLOY_BACKUP_DATABASE=${DEPLOY_BACKUP_DATABASE:-""}
DEPLOY_DROP_DATABASE_PREFIX=${DEPLOY_DROP_DATABASE_PREFIX:-""}
DEPLOY_EXCLUDE_ARGS=${DEPLOY_EXCLUDE_ARGS:-"--exclude=*.zip --exclude=._* --exclude=.DS_Store --exclude=.git*"}
DEPLOY_CLEAN=${DEPLOY_CLEAN:-1}
DB_ROOT_USER=${DB_ROOT_USER:-root}

# internal config values
QUIET=0
ANSWER_YES=${ANSWER_YES:-0}
USAGE=${USAGE:-0}
QX_COMPILE_ARGS=""
DEPLOY_MYSQL_CREDENTIAL_FILE="~/db_config.cnf"
DEPLOY_MYSQL_CREDENTIAL_OPT="--defaults-extra-file=$DEPLOY_MYSQL_CREDENTIAL_FILE"
DEPLOY_MYSQL_ROOT_CREDENTIAL_FILE="~/db_config_root.cnf"
DEPLOY_MYSQL_ROOT_CREDENTIAL_OPT="--defaults-extra-file=$DEPLOY_MYSQL_ROOT_CREDENTIAL_FILE"

# load .env file if defined as an environment variable (so that this script can be sourced)
if [[ "$BUILD_ENV_FILE" != "" ]]; then
  [[ -f $BUILD_ENV_FILE ]] || exit_with_error "File $BUILD_ENV_FILE does not exist"
  DEPLOY_ENV_FILE=$BUILD_ENV_FILE
  source "$BUILD_ENV_FILE"
fi

# Process command line
while [[ $1 != "" ]]; do
  case "$1" in

  "--env-file" | "-f")
    BUILD_ENV_FILE="$2"
    [[ -f $BUILD_ENV_FILE ]] || exit_with_error "File $BUILD_ENV_FILE does not exist"
    DEPLOY_ENV_FILE=$BUILD_ENV_FILE
    source "$BUILD_ENV_FILE"
    shift
    ;;

  "--deploy-env-file" | "-F")
    [[ "$BUILD_ENV_FILE" == "" ]] && exit_with_error "You have to set --env-file first"
    DEPLOY_ENV_FILE="$2"
    [[ -f $DEPLOY_ENV_FILE ]] || exit_with_error "File $DEPLOY_ENV_FILE does not exist"
    shift
    ;;

  "--build-config-file" | "-c")
    BUILD_CONFIG_FILE="$2"
    shift
    ;;

  "--build-target" | "-t")
    BUILD_TARGET="$2"
    shift
    ;;

  "--build-name" | "-n")
    BUILD_NAME="$2"
    shift
    ;;

  "--build-in-debug-mode" | "-M")
    export BUILD_DEBUG_MODE=1
    ;;

  "--skip-build" | "-k")
    BUILD_SKIP="all"
    ;;

  "--skip-build-client")
    BUILD_SKIP="$BUILD_SKIP client"
    ;;

  "--skip-build-server")
    BUILD_SKIP="$BUILD_SKIP server"
    ;;

  "--skip-composer")
    BUILD_SKIP="$BUILD_SKIP composer"
    ;;

  "--deploy-host" | "-H")
    DEPLOY_HOST="$2"
    shift
    ;;

  "--deploy-config-dir" | "-C")
    DEPLOY_CONFIG_DIR="$2"
    shift
    ;;

  "--deploy-dir" | "-D")
    DEPLOY_DIR="$2"
    shift
    ;;

  "--database" | "-B")
    DEPLOY_DB_NAME="$2"
    shift
    ;;

  "--import-database" | "-I")
    DEPLOY_IMPORT_DB_NAMES="$2"
    DEPLOY_EMPTY_DATABASE=1
    shift
    ;;

  "--backup" | "-b")
    DBNAME=${DEPLOY_DB_NAME:-$DB_DATABASE}
    if [[ "$2" == "" || ${2:0:1} == "-" ]]; then
      if [[ "$DBNAME" == "" ]]; then
        exit_with_error "You must set the database name before requesting a backup"
      fi
      DEPLOY_BACKUP_DATABASE="${DBNAME}_$(date '+%Y%m%d_%H%M%S')"
    else
      DEPLOY_BACKUP_DATABASE="$2"
      shift
    fi
    ;;

  "--empty-database" | "-E")
    DEPLOY_EMPTY_DATABASE=1
    ;;

  "--create-user" | "-U")
    [[ "$DB_ROOT_PASSWORD" != "" ]] || exit_with_error "You need to set DB_ROOT_PASSWORD"
    DEPLOY_DB_CREATE_USER=1
    shift
    ;;

  "--drop-database-prefix" | "-X")
    DEPLOY_DROP_DATABASE_PREFIX="$2"
    shift
    ;;

  "--clean")
    BUILD_CLEAN=1
    ;;

  "--no-deploy-clean")
    DEPLOY_CLEAN=0
    ;;

  "--deploy-clean-dir-prefix")
    DEPLOY_CLEAN_DIR_PREFIX="$2"
    shift
    ;;

  "--set-env" | "-e")
    ENV_VAR_NAME="$2"
    ENV_VAR_VALUE="$3"
    export $ENV_VAR_NAME=$ENV_VAR_VALUE
    shift
    shift
    ;;

  "--verbose" | "-v")
    BUILD_VERBOSE=1
    ;;

  "--quiet" | "-q")
    QUIET=1
    ;;

  "--yes" | "-y")
    ANSWER_YES=1
    ;;

  "--help" | "-h")
    USAGE=1
    ;;
  esac
  shift
done

if [[ $USAGE != 0 ]]; then
  cat <<EOF
Usage: $0 [options]
where options are:
${HELP_ADDITIONAL_TEXT}
  --env-file, -f file           - the .env file containing configuration
                                 (defaults to .env). Must be the first parameter
                                 if others are to override the settings.
  --deploy-env-file, -F file    - (optional) A stripped-down .env file which will
                                  be copied to the deploy target
  --build-config-file, -c       - the compiler configuration file to use
                                  (defaults to compile.json)
  --build-name, -n name         - an optional name for the subfolder for the build,
                                  defaults to the name of the build target
  --build-in-debug-mode, M      - turn on debugging features in build (BUILD_DEBUG_MODE=1)
  --clean                       - clean the build directories and caches
                                  before building
  --skip-build, -k              - use the build files that already exist
  --skip-build-client           - skip building of the client
  --skip-build-server           - skip building of the server
  --skip-composer               - skip building of the composer dependencies
  --deploy-host, -H path        - the host server to deploy to via SSH, overrides
                                  DEPLOY_HOST
  --deploy-dir, -D path         - the directory on the host to deploy to,
                                  overrides DEPLOY_DIR
  --deploy-config-dir, -C path  - the path to the configuration dir, absolute or
                                  relative to the deployment dir. Defaults to
                                  'config', overrides DEPLOY_CONFIG_DIR
  --create-user, -U             - create the user DB_USER with password DB_PASSWORD
  --database, -N name           - the name of the database to use on the host,
                                  overrides DB_DATABASE
  --empty-database, -E          - empty the database
  --import-database, -I name    - the name of the database to import tables from
                                  (only remotely), overrides DEPLOY_IMPORT_DB_NAMES
                                  implies -E
  --backup, -b [name]           - create a backup of the database before emptying it.
                                  If a name is provided, use that name for the backup
                                  (note that any existing database with that name
                                  will be deleted). Otherwise, use the database
                                  name with an appended timestamp (only remotely).
  --drop-database-prefix, -X    - Drops all databases with this prefix. (only remotely)
  --deploy-clean-dir-prefix     - Deletes all directories in the parent folder of
                                  the deployment directory that have this prefix
  --no-deploy-clean             - do not clean files on the deploy target
                                  before deployment
  --set-env                     - set environment variables, overriding values
                                  loaded from --env-file
  --yes, -y                     - answer yes to all prompts
  --verbose, -v                 - verbose output
  --help, -h                    - show usage help

Not all configuration values can be set via command line arguments. Instead, they
need to be set as environment variables before running this script or
need to be declared in the environment variable file specified by --env-file or
--deploy-env-file:
  DB_TYPE           - The type of the database (only mysql supported at this point)
  DB_HOST           - The host on which the database server can be reached (usually localhost)
  DB_PORT           - Port
  DB_USER           - The name of the database user for the application
  DB_PASSWORD       - Password of that user
  DB_ROOT_PASSWORD  - Password of root user, needed only for --
  APP_ENV_FILE      - Path to the .env file containg environment variables for the application
  APP_CONF_FILE     - Path to the .toml file containing configuration values for the application
EOF
  exit 0
fi

[[ "$BUILD_ENV_FILE" == "" ]] && exit_with_error "No environment file given. Set it with --env-file / -e"
if [[ "$BUILD_NAME" == "" ]]; then BUILD_NAME=$BUILD_TARGET; fi

# Directory for the dist build
DIST_DIR=${DIST_DIR:-$(pwd)/dist/$BUILD_NAME}

# Configure compile command

if [[ "$BUILD_CONFIG_FILE" != "" ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --config-file=$BUILD_CONFIG_FILE"
fi
if [[ "$BUILD_TARGET" != "" ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --target=$BUILD_TARGET"
fi
if [[ $BUILD_CLEAN != 0 ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --clean"
fi
if [[ $BUILD_VERBOSE != 0 ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --verbose"
elif [[ $QUIET != 0 ]]; then
  QX_COMPILE_ARGS="$QX_COMPILE_ARGS --quiet"
fi

# get environment variables that override the default

# override .env values
if [[ "$DEPLOY_DB_NAME" != "" ]]; then
  DB_DATABASE=$DEPLOY_DB_NAME
fi

# check variables
[[ "$DEPLOY_HOST" == "" ]] && exit_with_error "No deploy host given."
[[ "$DEPLOY_DIR" == "" ]] && exit_with_error "No deploy dir given."

if [[ "$DEPLOY_CONFIG_DIR" != /* ]]; then
  DEPLOY_CONFIG_DIR=$DEPLOY_DIR/$DEPLOY_CONFIG_DIR
fi

# verbose display of configuration
if [[ $BUILD_VERBOSE != 0 ]]; then
  echo "DEPLOY_CONFIG_DIR=$DEPLOY_CONFIG_DIR"
  echo "ANSWER_YES=$ANSWER_YES"
  echo "QUIET=$QUIET"
  echo "QX_COMPILE_ARGS=$QX_COMPILE_ARGS"
fi

if [[ $QUIET != 1 ]]; then
  echo
  echo "Deployment configuration:"
  echo "   Build environment file:      $BUILD_ENV_FILE"
  echo "   Deploy environment file:     $DEPLOY_ENV_FILE"
  echo "   Compiler configuration file: $BUILD_CONFIG_FILE"
  echo "   Build target:                $BUILD_TARGET"
  echo "   Build name:                  $BUILD_NAME"
  echo "   Build directory:             $DIST_DIR"
  echo "   Skip build step(s):          $([[ $BUILD_SKIP == "" ]] && echo 'No' || echo $BUILD_SKIP)"
  echo "   Deployment host:             $DEPLOY_HOST"
  echo "   Path on host:                $DEPLOY_DIR"
  echo "   Config directory on host:    $DEPLOY_CONFIG_DIR"
  echo "   Database used:               $DB_DATABASE"
  echo "   Clean before build:          $([[ $BUILD_CLEAN == 1 ]] && echo 'Yes' || echo 'No')"
  echo "   Clean target/database:       $([[ $DEPLOY_CLEAN == 1 ]] && echo 'Yes' || echo 'No')"
  echo "   Empty database:              $([[ $DEPLOY_EMPTY_DATABASE == 1 ]] && echo 'Yes' || echo 'No')"
  echo "   Import database(s):          $([[ "$DEPLOY_IMPORT_DB_NAMES" != "" ]] && echo "$DEPLOY_IMPORT_DB_NAMES" || echo '-')"
  echo "   Backup database into:        $([[ "$DEPLOY_BACKUP_DATABASE" != "" ]] && echo "$DEPLOY_BACKUP_DATABASE" || echo '-')"
  echo "   Drop databases with prefix:  $([[ "$DEPLOY_DROP_DATABASE_PREFIX" != "" ]] && echo "$DEPLOY_DROP_DATABASE_PREFIX" || echo '-')"
  echo "   Delete dirs with prefix:     $([[ "$DEPLOY_CLEAN_DIR_PREFIX" != "" ]] && echo "$DEPLOY_CLEAN_DIR_PREFIX" || echo '-')"
fi

if [ "$ANSWER_YES" != 1 ]; then
  read -r -p "Proceed? [y/N] " response
  case "$response" in
  [yY][eE][sS] | [yY])
    # pass
    ;;
  *)
    echo "Aborted."
    exit 0
    ;;
  esac
fi

# Build
if [[ $BUILD_SKIP != "all" ]]; then
  source tool/dist/build
fi

# Deploy!

function remote_execute() {
  [[ $BUILD_VERBOSE == 1 && "$1" != "\$"* ]] && echo ">>> CMD: $1"
  echo "$1" |ssh -T $DEPLOY_HOST bash
}

function defaults_extra_file_content() {
  cat <<EOF
[client]
host='$DB_HOST'
port='$DB_PORT'
user='$DB_USER'
password='$DB_PASSWORD'
EOF
}

function root_defaults_extra_file_content() {
  cat <<EOF
[client]
host='$DB_HOST'
port='$DB_PORT'
user='$DB_ROOT_USER'
password='$DB_ROOT_PASSWORD'
EOF
}

function setup_mysql_credentials() {
  remote_execute "echo \"$(defaults_extra_file_content)\" > $DEPLOY_MYSQL_CREDENTIAL_FILE"
  if [[ "$DB_ROOT_PASSWORD" != "" ]] ; then
    remote_execute "echo \"$(root_defaults_extra_file_content)\" > $DEPLOY_MYSQL_ROOT_CREDENTIAL_FILE"
  fi
}

#  if utf-8 chars are corrupted, add  | php -r "require '$DEPLOY_DIR/server/lib/fix-utf8.php';" \
function import_databases_expr() {
  cat <<EOF
    for db in "$DEPLOY_IMPORT_DB_NAMES"; do
      echo " - Cloning database '\$db' into '$DB_DATABASE'..."
      mysqldump \
       $DEPLOY_MYSQL_CREDENTIAL_OPT \
       --default-character-set=utf8 \
       --set-charset \
       \$db \
      | mysql \
       $DEPLOY_MYSQL_CREDENTIAL_OPT \
       --default-character-set=utf8 \
       $DB_DATABASE
    done
EOF
}

function clone_database_expr() {
  cat <<EOF
   echo " - Cloning database '$1' into '$2'..."
   mysqldump \
     $DEPLOY_MYSQL_CREDENTIAL_OPT \
     --default-character-set=utf8 \
     --set-charset \
     $1 \
   | mysql \
     $DEPLOY_MYSQL_CREDENTIAL_OPT \
     --default-character-set=utf8 \
     $2
EOF
}

function find_databases_with_prefix_expr() {
 cat <<EOF
  mysql $DEPLOY_MYSQL_CREDENTIAL_OPT \
    -e "SELECT schema_name \
    FROM information_schema.schemata \
    WHERE schema_name LIKE '$1%' \
    ORDER BY schema_name"
EOF
}

# importing databases, very hacky at the moment

if [ "$DEPLOY_HOST" == "local" ]; then
  #
  # local deployment, assumes development server
  #

  # files
  mkdir -p $DEPLOY_DIR
  if [ $DEPLOY_CLEAN == 1 ]; then
    echo ">>> Cleaning up $DEPLOY_HOST:$DEPLOY_DIR ..."
    sudo rm -rf $DEPLOY_DIR/*
  fi
  echo ">>> Copying files to $DEPLOY_HOST:$DEPLOY_DIR ..."
  cp -rf $DIST_DIR/* $DEPLOY_DIR
  chmod -R 0777 $DEPLOY_DIR/server/runtime

  # database
  if [ $DEPLOY_EMPTY_DATABASE == 1 ]; then
    echo ">>> Deleting database ..."
    mysql --user=$DB_USER --password=$DB_PASSWORD -e "drop database if exists $DB_DATABASE;"
  fi
  echo ">>> Creating database if it does not already exist ..."
  mysql --user=$DB_USER --password=$DB_PASSWORD -e "create database if not exists $DB_DATABASE;"

else
  #
  # remote deployment
  #
  echo ">>> Checking access to $DEPLOY_HOST..."
  output=$(remote_execute "echo \"hello world\"")
  [[ "$output" == *"hello world"* ]] || exit_with_error "Failed"

  # files
  if [ $DEPLOY_CLEAN_DIR_PREFIX != "" ]; then
    echo ">>> Deleting deployment directories with prefix $DEPLOY_CLEAN_DIR_PREFIX..."
    remote_execute "rm -rf $(dirname $DEPLOY_DIR)/$(echo $DEPLOY_CLEAN_DIR_PREFIX | sed 's/[./]//g')*" || true
  fi
  echo ">>> Creating $DEPLOY_DIR if not exists..."
  remote_execute "mkdir -p $DEPLOY_DIR;"
  if [ $DEPLOY_CLEAN == 1 ]; then
    echo ">>> Cleaning up $DEPLOY_DIR ..."
    remote_execute "rm -rf $DEPLOY_DIR/*" || true
  fi
  if remote_execute "command -v rsync > /dev/null"; then
    echo ">>> Syncing files with $DEPLOY_HOST:$DEPLOY_DIR ..."
    rsync $DEPLOY_EXCLUDE_ARGS -azpr $DIST_DIR/* $DEPLOY_HOST:$DEPLOY_DIR
  else
    echo ">>> Copying files to $DEPLOY_HOST:$DEPLOY_DIR ..."
    cd $DIST_DIR
    tar $DEPLOY_EXCLUDE_ARGS -czf - * | ssh -C $DEPLOY_HOST "cd $DEPLOY_DIR; tar --overwrite -xzf -"
    cd ..
  fi
  if [ "$DEPLOY_CONFIG_DIR" != "$DEPLOY_DIR/config" ]; then
    echo ">>> Moving configuration dir to $DEPLOY_CONFIG_DIR ..."
    remote_execute "mv $DEPLOY_DIR/config $DEPLOY_CONFIG_DIR"
    remote_execute "sed -i 's/__DIR__ \\. \\\"\\/config\\\"/$DEPLOY_CONFIG_DIR/' $DEPLOY_DIR/server.php"
  fi
  echo ">>> Adapting file permissions ..."
  remote_execute "find $DEPLOY_DIR/server/runtime -type d -print0 | xargs -0 chmod 777" || true

  # database
  echo ">>> Setting up mysql passwordless access ..."
  setup_mysql_credentials

  if [[ $DEPLOY_DB_CREATE_USER == 1 ]]; then
    echo ">>> Creating database user '$DB_USER' with access to '$DB_DATABASE' ..."
    PRIVS="SELECT, INSERT, DELETE, UPDATE, CREATE, DROP, ALTER, EXECUTE"
    remote_execute "mysql $DEPLOY_MYSQL_ROOT_CREDENTIAL_OPT -e \"CREATE USER IF NOT EXISTS ${DB_USER}@localhost IDENTIFIED BY '${DB_PASSWORD}'; FLUSH PRIVILEGES;\""
    remote_execute "mysql $DEPLOY_MYSQL_ROOT_CREDENTIAL_OPT -e \"GRANT $PRIVS ON $DB_DATABASE.* TO ${DB_USER}@localhost; FLUSH PRIVILEGES;\""
  fi
  if [[ "$DEPLOY_DROP_DATABASE_PREFIX" != "" ]]; then
    echo ">>> Dropping all database with prefix '$DEPLOY_DROP_DATABASE_PREFIX'..."
    databases=$(remote_execute "$(find_databases_with_prefix_expr $DEPLOY_DROP_DATABASE_PREFIX)")
    for db in $databases; do
      if [[ "$db" != "schema_name" ]]; then
        remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e 'drop database $db;'"
      fi
    done
  fi
  if [[ "$DEPLOY_BACKUP_DATABASE" != "" ]]; then
    db_exists=$(remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e \"show databases like '$DB_DATABASE';\"")
    if [[ "$db_exists" == *"$DB_DATABASE"* ]]; then
      echo ">>> Backing up database $DB_DATABASE ..."
      remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e 'drop database if exists $DEPLOY_BACKUP_DATABASE;'"
      remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e 'create database if not exists $DEPLOY_BACKUP_DATABASE;'"
      remote_execute "$(clone_database_expr $DB_DATABASE $DEPLOY_BACKUP_DATABASE)"
    fi
  fi
  if [ $DEPLOY_EMPTY_DATABASE == 1 ]; then
    echo ">>> Deleting database $DB_DATABASE..."
    remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e 'drop database if exists $DB_DATABASE;'"
  fi
  echo ">>> Creating database $DB_DATABASE if it does not already exist ..."
  remote_execute "mysql $DEPLOY_MYSQL_CREDENTIAL_OPT -e 'create database if not exists $DB_DATABASE;'"
  if [[ "$DEPLOY_IMPORT_DB_NAMES" != "" ]]; then
    echo ">>> Importing database(s)..."
    remote_execute "$(import_databases_expr)"
  fi
fi
echo "Done. Open app at $APP_URL"
