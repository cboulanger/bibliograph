#!/usr/bin/env bash

# Usage tool/dist/build path/to/.env
# Script can also be sourced

set -e
[ -z "$FUNCTIONS_LOADED" ] && source tool/lib/functions.sh
tool/env/http-server start > /dev/null

# dependencies: apt-get install jq (linux) / brew install jq (MacOS with homebrew)
# command -v jq >/dev/null 2>&1 || { echo >&2 "You need to install the jq command"; exit 1; }

# get environment variables defaults
if [[ "$1" != "" ]]; then
  BUILD_ENV_FILE=${1}
  [[ "$1" != "" ]] || exit_with_error "Missing configuration file. Pass as first argument or set BUILD_ENV_FILE environment variable."
  [[ -f "$BUILD_ENV_FILE" ]] || exit_with_error "Config file $BUILD_ENV_FILE does not exist"
  source $BUILD_ENV_FILE
fi

if [[ "$PHP_VERSION" == "" ]]; then
  >&2 echo "PHP_VERSION must be defined"
  exit 1
fi

# configurable variables
QX_CMD=${QX_CMD:-"npx qx"}
APP_ENV_FILE=${APP_ENV_FILE:-$(pwd)/test/.env}
APP_CONF_FILE=${APP_CONF_FILE:-$(pwd)/test/app.conf.toml}
BUILD_FILE=${BUILD_FILE:-compile-dist.json}
BUILD_TARGET=${BUILD_TARGET:-build}
BUILD_VERBOSE=${BUILD_VERBOSE:-0}
BUILD_CLEAN=${BUILD_CLEAN:-0}
BUILD_ZIP_FILE=${BUILD_ZIP_FILE:-0}
BUILD_DEBUG_MODE=${BUILD_DEBUG_MODE:-0}
BUILD_NAME=${BUILD_NAME:-$BUILD_TARGET}
VENDOR_DIR=${VENDOR_DIR:-src/lib/composer-$PHP_VERSION}
DIST_DIR=${DIST_DIR:-$(pwd)/dist/$BUILD_NAME}
DIST_SERVER_DIR=${DIST_SERVER_DIR:-$DIST_DIR/server}
DEPLOY_DIR=${DEPLOY_DIR:-""}
DEPLOY_ENV_FILE=${DEPLOY_ENV_FILE:-$APP_ENV_FILE}
DIST_CONF_DIR=${DIST_CONF_DIR:-$DIST_DIR/config}
DEPLOY_CONFIG_DIR=${DEPLOY_CONFIG_DIR:-"./config"}

[[ "$BUILD_SKIP" == "all" ]] && exit_with_error "Build script called although build should be skipped (BUILD_SKIP==all)"

# checks
[[ -f "$DEPLOY_ENV_FILE" ]] || exit_with_error "APP_ENV_FILE/DEPLOY_ENV_FILE: File '$DEPLOY_ENV_FILE' does not exist"
[[ -f "$APP_CONF_FILE" ]] || exit_with_error "APP_CONF_FILE: File '$APP_CONF_FILE' does not exist"
[[ -f "$BUILD_FILE" ]] || exit_with_error "BUILD_FILE: File '$BUILD_FILE' does not exist"

# other internal variables
TOP_DIR=$(pwd)
DIST_SERVER_DIR=$DIST_DIR/server
SERVER_SRC_DIR=$TOP_DIR/src/server
VERSION=$(node -p -e "require('$TOP_DIR/package.json').version")

if [[ $BUILD_ZIP_FILE == 1 ]]; then
  ZIP_NAME=bibliograph-${VERSION}.zip
fi

echo
echo "Building deployable/distributable version of Bibliograph"
if [[ $BUILD_VERBOSE == 1 ]]; then
  echo "   Qooxdoo build file:     $BUILD_FILE"
  echo "   Qooxdoo build target:   $BUILD_TARGET"
  echo "   Build directory:        $DIST_DIR"
  echo "   Appl. config file:      $APP_CONF_FILE"
  echo "   PHP version:            $PHP_VERSION"
  echo "   Vendor directory:       $VENDOR_DIR"
  echo "   Deployment directory:   $DEPLOY_DIR"
  echo "   Deployment config dir:  $DEPLOY_CONFIG_DIR"
  echo "   Deployed .env file:     $DEPLOY_ENV_FILE"
  echo "   Compiler version:       $($QX_CMD --version)"
  echo "   Custom Logo:            $([[ $BUILD_LOGO_PATH != "" ]] && echo "$BUILD_LOGO_PATH" || echo "No")"
  echo "   Build ZIP file:         $([[ $ZIP_NAME != "" ]] && echo "$ZIP_NAME" || echo "No")"
  echo "   Skip build parts:       $([[ $BUILD_SKIP != "" ]] && echo "$BUILD_SKIP" || echo "No")"
  echo "   Build in debug mode:    $([[ $BUILD_DEBUG_MODE == 1 ]] && echo "Yes" || echo "No")"
  echo "   Custom composer config: $([ -f "$COMPOSER" ] && echo "$COMPOSER" || echo "--")"
fi
echo

if [[ "$BUILD_SKIP" == "" ]]; then
  if [[ ! -d "$DIST_DIR" ]]; then
    echo ">>> Creating dist folder..."
    mkdir -p $DIST_DIR
  else
    echo ">>> Cleaning up dist folder..."
    source ./tool/dist/clean
  fi
else
  if [[ ! -d "$DIST_DIR" ]]; then
    exit_with_error "Build directory $DIST_DIR does not exist, run full build first."
  fi
fi

if [[ "$BUILD_SKIP" != *"client"* ]]; then
  echo ">>> Building client ..."
  # Create deploy build and copy into dist
  QX_COMPILE_ARGS=${QX_COMPILE_ARGS:-"--config-file=$BUILD_FILE --target=$BUILD_TARGET --clean"}
  [[ $BUILD_VERBOSE == 1 ]] && echo "$QX_CMD deploy $QX_COMPILE_ARGS"
  $QX_CMD deploy $QX_COMPILE_ARGS
  cp -a compiled/deploy/* "$DIST_DIR"

  # Replace logo file
  if [[ "$BUILD_LOGO_PATH" != "" ]]; then
    [[ -f "$BUILD_LOGO_PATH" ]] || exit_with_error "Logo file $BUILD_LOGO_PATH does not exist"
    echo ">>> Using custom logo file at $BUILD_LOGO_PATH ..."
    cp $BUILD_LOGO_PATH $DIST_DIR/resource/bibliograph/icon/bibliograph-logo.png
  fi
fi

if [[ "$BUILD_SKIP" != *"server"* ]]; then
  echo ">>> Building server ..."
  echo " - Copy/create files ..."
  # application files
  mkdir -p $DIST_SERVER_DIR
  cp -a $SERVER_SRC_DIR/{config,controllers,lib,messages,migrations,models,modules,schema,views,bootstrap.php} $DIST_SERVER_DIR/
  mkdir -p $DIST_SERVER_DIR/runtime/{cache,logs}

  # remove classes that should not be deployed
  rm $DIST_SERVER_DIR/controllers/{SseController,RpcProxyController,DevController}.php

  # configuration files
  mkdir -p $DIST_CONF_DIR
  cp $APP_CONF_FILE $DIST_CONF_DIR/app.conf.toml
  cp $DEPLOY_ENV_FILE $DIST_CONF_DIR/.env

  # .htaccess files
  cat << EOF > $DIST_DIR/.htaccess
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . server.php
EOF
  echo "DENY FROM ALL" >> $DIST_SERVER_DIR/.htaccess
  echo "DENY FROM ALL" >> $DIST_CONF_DIR/.htaccess

  # create server.php
  cat << EOF > $DIST_DIR/server.php
<?php
const YII_DEBUG=$BUILD_DEBUG_MODE;
const APP_ROOT_DIR = __DIR__;
const DOTENV_FILE = "$DEPLOY_CONFIG_DIR/.env";
const APP_CONFIG_FILE = "$DEPLOY_CONFIG_DIR/app.conf.toml";
const APP_FRONTEND_DIR = "$DEPLOY_DIR/bibliograph";
require './server/bootstrap.php';
\$config = require './server/config/web.php';
\$app = new yii\web\Application(\$config);
\$app->run();
EOF

  # create yii executable for maintenance tasks
  mkdir -p $DIST_DIR/server/bin
  cat << EOF > $DIST_DIR/server/bin/yii
#!/usr/bin/env php
<?php
const YII_DEBUG=$BUILD_DEBUG_MODE;
const APP_ROOT_DIR = __DIR__;
const APP_LOG_NAME = "console.log";
const DOTENV_FILE = "$DEPLOY_CONFIG_DIR/.env";
const APP_CONFIG_FILE = "$DEPLOY_CONFIG_DIR/app.conf.toml";
require './server/bootstrap.php';
\$config = require './server/config/console.php';
\$application = new yii\console\Application(\$config);
\$exitCode = \$application->run();
exit(\$exitCode);
EOF
  chmod +x $DIST_DIR/server/bin/yii
  echo "DENY FROM ALL" >> $DIST_DIR/server/bin/.htaccess

  if [[ "$BUILD_SKIP" != *"composer"* ]]; then
    echo " - Adding composer dependencies ..."
    # install composer dependencies
    if [ -f "$COMPOSER" ]; then
      echo " - Adding custom composer.json from $COMPOSER ..."
      cp $COMPOSER $DIST_SERVER_DIR/composer.json
    else
      cp -a $VENDOR_DIR/composer.* $DIST_SERVER_DIR
    fi
    # TODO this works only if $DIST_SERVER_DIR is below the cwd!
    COMPOSER_ARGS="--no-dev --working-dir=${DIST_SERVER_DIR#$(pwd)/}"
    if [[ $BUILD_CLEAN != 0 ]]; then
      tool/bin/php src/lib/composer.phar clearcache
    fi
    if [[ $BUILD_VERBOSE != 0 ]]; then
      COMPOSER_ARGS="$COMPOSER_ARGS -v"
      tool/bin/php src/lib/composer.phar install $COMPOSER_ARGS
    else
      tool/bin/php src/lib/composer.phar install $COMPOSER_ARGS #> /dev/null
    fi

    if ! [ -d $DIST_SERVER_DIR/vendor ] || ! [ -f $DIST_SERVER_DIR/vendor/autoload.php ]; then
     exit_with_error "Composer install failed!"
    fi
    rm -f $DIST_SERVER_DIR/composer.* &> /dev/null
  fi

  echo " - Adding documentation ..."
  cp $TOP_DIR/{readme.md,release-notes.md} $DIST_DIR
  echo $VERSION > $DIST_DIR/version.txt
fi

if [[ "$ZIP_NAME" != "" ]]; then
  echo ">>> Building ZIP file ..."
  cd $DIST_DIR
  zip -q -r $ZIP_NAME *
  mv $ZIP_NAME $DIST_DIR/
fi

echo "Done."
